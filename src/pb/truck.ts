/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: truck.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace truck {
    export class Route extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            coordinates?: RouteNode[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("coordinates" in data && data.coordinates != undefined) {
                    this.coordinates = data.coordinates;
                }
            }
        }
        get coordinates() {
            return pb_1.Message.getRepeatedWrapperField(this, RouteNode, 1) as RouteNode[];
        }
        set coordinates(value: RouteNode[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            coordinates?: ReturnType<typeof RouteNode.prototype.toObject>[];
        }): Route {
            const message = new Route({});
            if (data.coordinates != null) {
                message.coordinates = data.coordinates.map(item => RouteNode.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                coordinates?: ReturnType<typeof RouteNode.prototype.toObject>[];
            } = {};
            if (this.coordinates != null) {
                data.coordinates = this.coordinates.map((item: RouteNode) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.coordinates.length)
                writer.writeRepeatedMessage(1, this.coordinates, (item: RouteNode) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Route {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Route();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.coordinates, () => pb_1.Message.addToRepeatedWrapperField(message, 1, RouteNode.deserialize(reader), RouteNode));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Route {
            return Route.deserialize(bytes);
        }
    }
    export class RouteNode extends pb_1.Message {
        #one_of_decls: number[][] = [[2]];
        constructor(data?: any[] | ({
            coordinates?: Coordinates;
        } & (({
            stop_index?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("coordinates" in data && data.coordinates != undefined) {
                    this.coordinates = data.coordinates;
                }
                if ("stop_index" in data && data.stop_index != undefined) {
                    this.stop_index = data.stop_index;
                }
            }
        }
        get coordinates() {
            return pb_1.Message.getWrapperField(this, Coordinates, 1) as Coordinates;
        }
        set coordinates(value: Coordinates) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_coordinates() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get stop_index() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set stop_index(value: number) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_stop_index() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _stop_index() {
            const cases: {
                [index: number]: "none" | "stop_index";
            } = {
                0: "none",
                2: "stop_index"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            coordinates?: ReturnType<typeof Coordinates.prototype.toObject>;
            stop_index?: number;
        }): RouteNode {
            const message = new RouteNode({});
            if (data.coordinates != null) {
                message.coordinates = Coordinates.fromObject(data.coordinates);
            }
            if (data.stop_index != null) {
                message.stop_index = data.stop_index;
            }
            return message;
        }
        toObject() {
            const data: {
                coordinates?: ReturnType<typeof Coordinates.prototype.toObject>;
                stop_index?: number;
            } = {};
            if (this.coordinates != null) {
                data.coordinates = this.coordinates.toObject();
            }
            if (this.stop_index != null) {
                data.stop_index = this.stop_index;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_coordinates)
                writer.writeMessage(1, this.coordinates, () => this.coordinates.serialize(writer));
            if (this.has_stop_index)
                writer.writeUint32(2, this.stop_index);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RouteNode {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RouteNode();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.coordinates, () => message.coordinates = Coordinates.deserialize(reader));
                        break;
                    case 2:
                        message.stop_index = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RouteNode {
            return RouteNode.deserialize(bytes);
        }
    }
    export class Coordinates extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            latitude?: number;
            longitude?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("latitude" in data && data.latitude != undefined) {
                    this.latitude = data.latitude;
                }
                if ("longitude" in data && data.longitude != undefined) {
                    this.longitude = data.longitude;
                }
            }
        }
        get latitude() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set latitude(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get longitude() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set longitude(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            latitude?: number;
            longitude?: number;
        }): Coordinates {
            const message = new Coordinates({});
            if (data.latitude != null) {
                message.latitude = data.latitude;
            }
            if (data.longitude != null) {
                message.longitude = data.longitude;
            }
            return message;
        }
        toObject() {
            const data: {
                latitude?: number;
                longitude?: number;
            } = {};
            if (this.latitude != null) {
                data.latitude = this.latitude;
            }
            if (this.longitude != null) {
                data.longitude = this.longitude;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.latitude != 0)
                writer.writeFloat(1, this.latitude);
            if (this.longitude != 0)
                writer.writeFloat(2, this.longitude);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Coordinates {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Coordinates();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.latitude = reader.readFloat();
                        break;
                    case 2:
                        message.longitude = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Coordinates {
            return Coordinates.deserialize(bytes);
        }
    }
    export class RouteRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            coordinates?: Coordinates[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("coordinates" in data && data.coordinates != undefined) {
                    this.coordinates = data.coordinates;
                }
            }
        }
        get coordinates() {
            return pb_1.Message.getRepeatedWrapperField(this, Coordinates, 1) as Coordinates[];
        }
        set coordinates(value: Coordinates[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            coordinates?: ReturnType<typeof Coordinates.prototype.toObject>[];
        }): RouteRequest {
            const message = new RouteRequest({});
            if (data.coordinates != null) {
                message.coordinates = data.coordinates.map(item => Coordinates.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                coordinates?: ReturnType<typeof Coordinates.prototype.toObject>[];
            } = {};
            if (this.coordinates != null) {
                data.coordinates = this.coordinates.map((item: Coordinates) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.coordinates.length)
                writer.writeRepeatedMessage(1, this.coordinates, (item: Coordinates) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RouteRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RouteRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.coordinates, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Coordinates.deserialize(reader), Coordinates));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RouteRequest {
            return RouteRequest.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedTruckRouterService {
        static definition = {
            GetRoute: {
                path: "/truck.TruckRouter/GetRoute",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RouteRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RouteRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Route) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Route.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetRoute(call: grpc_1.ServerUnaryCall<RouteRequest, Route>, callback: grpc_1.sendUnaryData<Route>): void;
    }
    export class TruckRouterClient extends grpc_1.makeGenericClientConstructor(UnimplementedTruckRouterService.definition, "TruckRouter", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetRoute: GrpcUnaryServiceInterface<RouteRequest, Route> = (message: RouteRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Route>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Route>, callback?: grpc_1.requestCallback<Route>): grpc_1.ClientUnaryCall => {
            return super.GetRoute(message, metadata, options, callback);
        };
    }
}
